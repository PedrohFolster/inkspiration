package inkspiration.backend.entities.disponibilidade;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import inkspiration.backend.entities.Disponibilidade;

@DisplayName("Testes de validaÃ§Ã£o de horÃ¡rios - Disponibilidade")
public class DisponibilidadeHorariosTest {

    private Disponibilidade disponibilidade;

    @BeforeEach
    void setUp() {
        disponibilidade = new Disponibilidade();
    }

    @Test
    @DisplayName("Deve aceitar horÃ¡rios vÃ¡lidos simples")
    void deveAceitarHorariosValidosSimples() {
        String horarios = "08:00-18:00";
        disponibilidade.setHrAtendimento(horarios);
        assertEquals(horarios, disponibilidade.getHrAtendimento());
    }

    @Test
    @DisplayName("Deve aceitar horÃ¡rios vÃ¡lidos complexos")
    void deveAceitarHorariosValidosComplexos() {
        String horarios = "Segunda: 08:00-12:00, 14:00-18:00\nTerÃ§a: 08:00-17:00\nQuarta: 09:00-18:00";
        disponibilidade.setHrAtendimento(horarios);
        assertEquals(horarios, disponibilidade.getHrAtendimento());
    }

    @Test
    @DisplayName("Deve aceitar horÃ¡rios com caracteres especiais")
    void deveAceitarHorariosComCaracteresEspeciais() {
        String horarios = "Seg-Sex: 8h Ã s 18h | SÃ¡b: 8h Ã s 12h";
        disponibilidade.setHrAtendimento(horarios);
        assertEquals(horarios, disponibilidade.getHrAtendimento());
    }

    @Test
    @DisplayName("Deve aceitar horÃ¡rios em JSON")
    void deveAceitarHorariosEmJson() {
        String horarios = "{\"segunda\": \"08:00-18:00\", \"terca\": \"08:00-17:00\"}";
        disponibilidade.setHrAtendimento(horarios);
        assertEquals(horarios, disponibilidade.getHrAtendimento());
    }

    @Test
    @DisplayName("Deve aceitar horÃ¡rios com atÃ© 5000 caracteres")
    void deveAceitarHorariosComAte5000Caracteres() {
        String horarios = "H".repeat(5000);
        disponibilidade.setHrAtendimento(horarios);
        assertEquals(horarios, disponibilidade.getHrAtendimento());
    }

    @Test
    @DisplayName("Deve remover espaÃ§os das bordas dos horÃ¡rios")
    void deveRemoverEspacosDosBordaoDosHorarios() {
        disponibilidade.setHrAtendimento("  08:00-18:00  ");
        assertEquals("08:00-18:00", disponibilidade.getHrAtendimento());
    }

    @Test
    @DisplayName("Deve aceitar horÃ¡rios nulos")
    void deveAceitarHorariosNulos() {
        disponibilidade.setHrAtendimento(null);
        assertNull(disponibilidade.getHrAtendimento());
    }

    @Test
    @DisplayName("Deve aceitar horÃ¡rios vazios e converter para null")
    void deveAceitarHorariosVaziosEConverterParaNull() {
        disponibilidade.setHrAtendimento("");
        assertNull(disponibilidade.getHrAtendimento());
    }

    @Test
    @DisplayName("Deve aceitar horÃ¡rios com apenas espaÃ§os e converter para null")
    void deveAceitarHorariosComApenasEspacosEConverterParaNull() {
        disponibilidade.setHrAtendimento("   ");
        assertNull(disponibilidade.getHrAtendimento());
    }

    @Test
    @DisplayName("NÃ£o deve aceitar horÃ¡rios com mais de 5000 caracteres")
    void naoDeveAceitarHorariosComMaisDe5000Caracteres() {
        String horarios = "H".repeat(5001);
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            disponibilidade.setHrAtendimento(horarios);
        });
        assertEquals("HorÃ¡rios de atendimento nÃ£o podem exceder 5000 caracteres", exception.getMessage());
    }

    @Test
    @DisplayName("Deve aceitar horÃ¡rios com quebras de linha")
    void deveAceitarHorariosComQuebrasLinha() {
        String horarios = "Segunda-feira:\n08:00 - 12:00\n14:00 - 18:00\n\nTerÃ§a-feira:\n08:00 - 17:00";
        disponibilidade.setHrAtendimento(horarios);
        assertEquals(horarios, disponibilidade.getHrAtendimento());
    }

    @Test
    @DisplayName("Deve aceitar horÃ¡rios com emojis")
    void deveAceitarHorariosComEmojis() {
        String horarios = "ðŸ•˜ Segunda: 08:00-18:00 âœ…\nðŸ•˜ TerÃ§a: 08:00-17:00 âœ…";
        disponibilidade.setHrAtendimento(horarios);
        assertEquals(horarios, disponibilidade.getHrAtendimento());
    }

    @Test
    @DisplayName("Deve aceitar horÃ¡rios com acentos")
    void deveAceitarHorariosComAcentos() {
        String horarios = "Segunda Ã  Sexta: 8h Ã s 18h\nSÃ¡bado: 8h Ã s 12h";
        disponibilidade.setHrAtendimento(horarios);
        assertEquals(horarios, disponibilidade.getHrAtendimento());
    }
} 